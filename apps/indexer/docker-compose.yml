version: '3.8'

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: indexer
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  unruggableMemecoin-deploy-indexer:
    environment:
      - AUTH_TOKEN=${AUTH_TOKEN}
      - POSTGRES_CONNECTION_STRING=postgresql://admin:postgres@postgres:5432/indexer
    image: quay.io/apibara/sink-postgres:latest
    command: 'run ./indexer/unruggableMemecoin-deploy.indexer.ts --allow-env-from-env AUTH_TOKEN,POSTGRES_CONNECTION_STRING -A ${AUTH_TOKEN}'
    volumes:
      - ./src:/indexer
    depends_on:
      - postgres
    networks:
      - backend
    restart: on-failure

  unruggableMemecoin-launch-indexer:
    environment:
      - AUTH_TOKEN=${AUTH_TOKEN}
      - POSTGRES_CONNECTION_STRING=postgresql://admin:postgres@postgres:5432/indexer
    image: quay.io/apibara/sink-postgres:latest
    command: 'run ./indexer/unruggableMemecoin-launch.indexer.ts --allow-env-from-env AUTH_TOKEN,POSTGRES_CONNECTION_STRING -A ${AUTH_TOKEN}'
    volumes:
      - ./src:/indexer
    depends_on:
      - postgres
    networks:
      - backend
    restart: on-failure

  unruggableMemecoin-transfers-indexer:
    environment:
      - AUTH_TOKEN=${AUTH_TOKEN}
      - POSTGRES_CONNECTION_STRING=postgresql://admin:postgres@postgres:5432/indexer
    image: quay.io/apibara/sink-postgres:latest
    command: 'run ./indexer/unruggableMemecoin-transfers.indexer.ts --allow-env-from-env AUTH_TOKEN,POSTGRES_CONNECTION_STRING -A ${AUTH_TOKEN}'
    volumes:
      - ./src:/indexer
    depends_on:
      - postgres
    networks:
      - backend
    restart: on-failure

  buy-indexer:
    environment:
      - AUTH_TOKEN=${AUTH_TOKEN}
      - POSTGRES_CONNECTION_STRING=postgresql://admin:postgres@postgres:5432/indexer
    image: quay.io/apibara/sink-postgres:latest
    command: 'run ./indexer/buy-token.ts --allow-env-from-env AUTH_TOKEN,POSTGRES_CONNECTION_STRING -A ${AUTH_TOKEN}'
    volumes:
      - ./src:/indexer
    depends_on:
      - postgres
    networks:
      - backend
    restart: on-failure


  sell-indexer:
    environment:
      - AUTH_TOKEN=${AUTH_TOKEN}
      - POSTGRES_CONNECTION_STRING=postgresql://admin:postgres@postgres:5432/indexer
    image: quay.io/apibara/sink-postgres:latest
    command: 'run ./indexer/sell-token.ts --allow-env-from-env AUTH_TOKEN,POSTGRES_CONNECTION_STRING -A ${AUTH_TOKEN}'
    volumes:
      - ./src:/indexer
    depends_on:
      - postgres
    networks:
      - backend
    restart: on-failure

  token-indexer:
    environment:
      - AUTH_TOKEN=${AUTH_TOKEN}
      - POSTGRES_CONNECTION_STRING=postgresql://admin:postgres@postgres:5432/indexer
    image: quay.io/apibara/sink-postgres:latest
    command: 'run ./indexer/token-launch.ts --allow-env-from-env AUTH_TOKEN,POSTGRES_CONNECTION_STRING -A ${AUTH_TOKEN}'
    volumes:
      - ./src:/indexer
    depends_on:
      - postgres
    networks:
      - backend
    restart: on-failure

  deploy-indexer:
    environment:
      - AUTH_TOKEN=${AUTH_TOKEN}
      - POSTGRES_CONNECTION_STRING=postgresql://admin:postgres@postgres:5432/indexer
    image: quay.io/apibara/sink-postgres:latest
    command: 'run ./indexer/deploy-token.ts --allow-env-from-env AUTH_TOKEN,POSTGRES_CONNECTION_STRING -A ${AUTH_TOKEN}'
    volumes:
      - ./src:/indexer
    depends_on:
      - postgres
    networks:
      - backend
    restart: on-failure



networks:
  backend:
    driver: bridge
